#include <iostream>
using namespace std;

bool isSafe(int arr[100][100],int n,int m, int xPosition, int yPosition, bool visited[100][100]) {
    if (arr[yPosition][xPosition] == 0 && xPosition < m
        && yPosition < n && xPosition >= 0 && yPosition >= 0 && 
		visited[yPosition][xPosition] == false) return  true;
        else return  false;
    }
    
bool tryMove(int arr[100][100], int n, int m, int xPosition, int yPosition,
    int sol[100][100], bool visited[100][100]) {
	  
    if (xPosition == m - 1 && yPosition == n - 1 && visited[yPosition][xPosition] == false) {
        sol[yPosition][xPosition] = 2;
        return true;
    } else {
        if (isSafe(arr, n, m, xPosition, yPosition, visited)) {
            sol[yPosition][xPosition] = 2;
            visited[yPosition][xPosition] = true;
                
            if (tryMove(arr, n, m, xPosition + 1, yPosition, sol, visited)) {
                return true;
            } else if (tryMove(arr, n, m, xPosition, yPosition - 1,sol,visited)) {
				return true;
			} else if (tryMove(arr, n, m, xPosition, yPosition + 1,sol,visited)) {
                return true;
            }
			
			sol[yPosition][xPosition] = 0;
            visited[yPosition][xPosition] = false;
            return false;
        }
    }
        return false;
    }

void slove(int arr[100][100], int n, int m, int xPosition, int yPosition) {
    int sol[100][100];
    bool visited[100][100];
    for (int i = 0 ; i < n ; i ++) {
        for (int j = 0 ; j < m ; j ++) {
            sol[i][j] = arr[i][j];
            visited[i][j] = false;
        }
	}

    if (tryMove(arr, n, m, xPosition, yPosition, sol, visited)) {
            for (int i = 0 ; i < n ; i ++) {
                for (int j = 0 ; j < m ; j ++) {
                    cout << sol[i][j] << " ";
                }
                cout << endl;
            }
        }
    }

int main() {
    
    int n, m;
    cin >> n >> m;
    int maze[100][100];
    for (int i = 0 ; i < n ; i ++) {
        for (int j = 0 ; j < m ; j ++) {
            cin >> maze[i][j];
        }
    }
    slove(maze, n, m, 0, 0);
}