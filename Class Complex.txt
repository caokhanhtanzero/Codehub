class Complex {
    double a, b;
public:
    Complex(double a_ = 0, double b_ = 0) {
        a = a_;
        b = b_;
    }
    friend ostream& operator<<(ostream& os, const Complex& f) {
        if (f.a == 0) {
            if (f.b == 0) os << "0";
            else if (f.b == 1) os << "i";
            else if (f.b == -1) os << "-i";
            else os << f.b << "i";
        } else {
            if (f.b == 0) os << f.a;
            else if (f.b == 1) os << f.a << "+" << "i";
            else if (f.b == -1) os << f.a << "-i";
            else if (f.b < -1) os << f.a << "-" << -1*f.b << "i";
            else os << f.a << "+" << f.b << "i";
        }
        return os;
    }
    Complex operator+(const Complex& f) const {
        return Complex(a + f.a, b + f.b);
    }
    Complex operator-(const Complex& f) const {
        return Complex(a - f.a, b - f.b);
    }
    Complex operator*(const Complex& f) const {
        return Complex(a*f.a - b*f.b, a*f.b + b*f.a);
    }
    Complex operator/(const Complex& f) const {
        return Complex((a*f.a + b*f.b)/
        (f.a*f.a + f.b*f.b), (b*f.a - a*f.b)/
        (f.a*f.a + f.b*f.b));
    }
    double modulus() const {
        return sqrt(a*a + b*b);
    }
    bool operator>(const Complex& f) const {
        if (f.modulus() > modulus()) return 1;
        return 0;
    }
    bool operator<(const Complex& f) const {
        if (f.modulus() < modulus()) return 1;
        return 0;
    }
};