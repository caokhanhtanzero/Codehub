#include<iostream>
using namespace std;

struct Node{
	Node *next;
	int data;
};

typedef Node *List;

void Init(List &l){
	l= NULL;
}

Node *createNode(int x){
	Node *p = new Node;
	if(!p) exit(1);
	p->next = NULL;
	p->data = x;
	return p;
}

void addTail(List &l, Node *p ){
	if(!l) l = p;
	else{
		Node *pp = l;
		while(pp->next) pp = pp->next;
		pp->next = p;
	}
}

void addHead(List &l, Node *p ){
	p->next = l;
	l = p;
}

Node *merger(List l1, List l2){
	if(!l1 && !l2) return NULL;
	Node *p = new Node;
	List l; Init(l);
	while(l1 || l2){
		if(l1 && l2){
			if(l1->data < l2->data){
				p = l1;
				l1 = p->next;
				addHead(l,p);
			}
			else{
				p = l2;
				l2 = p->next;
				addHead(l,p);
			}
		}
		if(!l1 && l2){
			p = l2;
			l2 = p->next;
			addHead(l,p);
		}
		
		if(!l2 && l1){
			p = l1;
			l1 = p->next;
			addHead(l,p);
		}
	}
	return l;
}



void xuat(List l){
	Node *tail, *t;
    tail=NULL;
    while(l!=NULL){
        t=l->next;
        l->next=tail;
        tail=l;
        l=t;
    }
    while(tail!=NULL){
		cout<<tail->data << " ";
		tail=tail->next;
	}
}

void nhap(List &l){
	int n, x;
    cin>> n;
	while(n--){
		cin>> x;
		Node *p = createNode(x);
		addTail(l, p);
	}
}

int main(){
	List l1, l2, l;
	Init(l1); Init(l2); Init(l);
	nhap(l1); nhap(l2);
	l = merger(l1, l2);
	xuat(l);
	return 0;
}