Node* createNode(int value){
    Node *temp = new Node; // declare a node
    temp->next = NULL;// Cho next trỏ tới NULL
    temp->value = value; // Gán giá trị cho Node
    return temp;//Trả về node mới đã có giá trị
}

void print(Node* head)
{
	while (head != NULL){
		cout << head->value << " ";
		head = head->next;
	}
}

Node* insertHead(Node* head, int value)
{
    Node *temp = createNode(value);
	temp->next = head;
	head = temp;
    return head;
}

Node* insertTail(Node* head, int value)
{
    Node *temp = createNode(value);
    if(head == NULL) {
        head = temp;
    } else {
        Node *p;
        p = head;
        while(p->next != NULL)
            p = p->next;
        p->next = temp;
    }
    return head;
}

Node* deleteNode(Node* head, int pos)
{
    if (pos == 0) {
        return head->next; 
    }
    head->next = deleteNode(head->next, pos - 1);
    return head;
}

int getValue(Node* head, int pos)
{
    int k = 0;
    while(head->next != NULL && k != pos){
        k++;
        head = head->next;
    }
    return head->value;
}


////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////



bool compareLists(Node* headA, Node* headB) {
    int value;
    Node *a=headA;
    Node *b=headB;
    Node *p = headA;
    Node *q = headB;
    int countA=0,countB=0;
    while(a!=NULL){
        countA++;
        a=a->next;
    }
    while(b!=NULL){
        countB++;
        b=b->next;
    }
    if(countA==countB ){
        while (p!=NULL && q!=NULL){
            if(p->value!=q->value){
                return false;
            }
            p=p->next; q=q->next;
        }
        return true;
    }
    return false;
}


////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////



Node* createNode(int value){
    Node *temp = new Node; // declare a node
    temp->next = NULL;// Cho next trỏ tới NULL
    temp->value = value; // Gán giá trị cho Node
    return temp;//Trả về node mới đã có giá trị
}

Node* deleteDuplicates(Node* head)
{
    if ( head == NULL ) return NULL;
    Node *nextItem = head->next;
    while ( nextItem != NULL && head->value == nextItem->value ) {
        nextItem = nextItem->next;
    }
    head->next = deleteDuplicates( nextItem );
    return head;
}

Node* insert(Node* head, int value)
{
    Node* current;
    Node *temp = createNode(value);
    if (head == NULL || head->value >= temp->value) { 
        temp->next = head; 
        head = temp; 
    } else {
        current = head; 
        while (current->next != NULL  && current->next->value < temp->value) { 
            current = current->next; 
        } 
        temp->next = current->next; 
        current->next = temp;
    }
    return head;
}




////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////


Node* convert(Node* head)
{
    if (head == NULL) return head;
    int size = 0, count = 0;
    Node* s; // Trỏ để lấy size of linklist
    for (s = head; s != NULL; s = s->next) {
        size++;
    }
    Node* m = head; // Trỏ đến giữa linklist
    for (int i = 0; i < size/2 - 1; i++) {
        m = m->next;
    }
    Node* q_curr = m->next; // Trỏ từ giữa linklist
    m->next = NULL; // Tách head thành 2 linklist
    Node* p_curr = head; // Trỏ từ đầu linklist
    
    Node* p_next;
    Node* q_next;
    while (p_curr != NULL && q_curr != NULL) {
        p_next = p_curr->next;  
        q_next = q_curr->next;
        
        
        q_curr->next = p_next; 
        p_curr->next = q_curr;
        
        
        p_curr = p_next;  
        q_curr = q_next;  
        
        
    }
    
    return head;
}